type port-bridge, domain;
type port-bridge_exec, exec_type, vendor_file_type, file_type;
init_daemon_domain(port-bridge)

userdebug_or_eng(`
  domain_auto_trans(shell, port-bridge_exec, netmgrd)
  #domain_auto_trans(adbd, port-bridge_exec, netmgrd)
  diag_use(port-bridge)
')

# Allow operations on different types of sockets
allow port-bridge port-bridge:netlink_kobject_uevent_socket { create bind read };
allow port-bridge mnt_vendor_file:dir {search write add_name };
allow port-bridge mnt_vendor_file:file { write create open getattr setattr};
allow port-bridge quec_prop:file { open read getattr };
allow port-bridge quec_prop:property_service {set};
allow port-bridge {
    # Allow operations on mhi transport
    mhi_device
    # Allow operations on gadget serial device
    gadget_serial_device
    # Allow operations on ATCoP g-link transport
    at_device
}:chr_file rw_file_perms;

# Allow write permissions for log file
allow port-bridge port_bridge_data_file:file create_file_perms;
allow port-bridge port_bridge_data_file:dir w_dir_perms;
allow port-bridge modem_efs_partition_device:blk_file { read write open  };
allow port-bridge block_device:dir { search };
#access ipa sysfs node
allow port-bridge sysfs_data:file r_file_perms;
allow port-bridge {vendor_shell_exec vendor_toolbox_exec}:file execute_no_trans;
allow port-bridge sysfs_socinfo:file rw_file_perms;
allow port-bridge property_socket:sock_file { read write };
allow port-bridge init:unix_stream_socket { connectto };
allow port-bridge vendor_persist_mmi_file:dir {search};
allow port-bridge vendor_persist_mmi_file:file { read open getattr };

allow port-bridge vendor_shell_exec:file execute_no_trans;
allow port-bridge sysfs_battery_supply:dir search;
allow port-bridge sysfs_battery_supply:file rw_file_perms;
allow port-bridge sysfs:file {read open getattr};
allow port-bridge proc:file {read open getattr};
allow port-bridge proc_meminfo:file {read open getattr};
